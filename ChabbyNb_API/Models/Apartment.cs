//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChabbyNb.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using ChabbyNb_API.Models;

    public partial class Apartment
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Apartment()
        {
            this.ApartmentAmenities = new HashSet<ApartmentAmenity>();
            this.ApartmentImages = new HashSet<ApartmentImage>();
            this.Bookings = new HashSet<Booking>();
            this.Reviews = new HashSet<Review>();
        }
    
        public int ApartmentID { get; set; }
        
        [Required]
        [StringLength(100)]
        [Display(Name = "Apartment Title")]
        public string Title { get; set; }
        
        [Required]
        [Display(Name = "Description")]
        public string Description { get; set; }
        
        [Required]
        [StringLength(200)]
        [Display(Name = "Address")]
        public string Address { get; set; }
        
        [StringLength(100)]
        [Display(Name = "Neighborhood")]
        public string Neighborhood { get; set; }
        
        [Required]
        [Range(1, 10000)]
        [Display(Name = "Price Per Night")]
        public decimal PricePerNight { get; set; }
        
        [Required]
        [Range(0, 10)]
        [Display(Name = "Bedrooms")]
        public int Bedrooms { get; set; }
        
        [Required]
        [Range(0, 10)]
        [Display(Name = "Bathrooms")]
        public int Bathrooms { get; set; }
        
        [Required]
        [Range(1, 30)]
        [Display(Name = "Maximum Occupancy")]
        public int MaxOccupancy { get; set; }
        
        [Range(0, 1000)]
        [Display(Name = "Square Meters")]
        public Nullable<int> SquareMeters { get; set; }
        
        [Display(Name = "Pet Friendly")]
        public bool PetFriendly { get; set; }
        
        [Range(0, 1000)]
        [Display(Name = "Pet Fee")]
        public Nullable<decimal> PetFee { get; set; }
        
        [Display(Name = "Latitude")]
        public Nullable<decimal> Latitude { get; set; }
        
        [Display(Name = "Longitude")]
        public Nullable<decimal> Longitude { get; set; }
        
        public System.DateTime CreatedDate { get; set; }
        public bool IsActive { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ApartmentAmenity> ApartmentAmenities { get; set; }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ApartmentImage> ApartmentImages { get; set; }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Booking> Bookings { get; set; }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Review> Reviews { get; set; }
        
        // Helper methods for views
        public string GetPrimaryImageUrl()
        {
            var primaryImage = ApartmentImages.FirstOrDefault(i => i.IsPrimary);
            if (primaryImage != null)
                return primaryImage.ImageUrl;
                
            // Return first image if no primary image is set
            var firstImage = ApartmentImages.FirstOrDefault();
            if (firstImage != null)
                return firstImage.ImageUrl;
                
            // Return default image if no images exist
            return "/Content/Images/default-apartment.jpg";
        }
        
        public double GetAverageRating()
        {
            if (Reviews.Count == 0)
                return 0;
                
            return Reviews.Average(r => r.Rating);
        }
        
        public int GetReviewCount()
        {
            return Reviews.Count;
        }
        
        public IEnumerable<Amenity> GetAmenities()
        {
            return ApartmentAmenities.Select(aa => aa.Amenity);
        }
    }
}
